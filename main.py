import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from emoji_list import all_emoji
import aiomysql
import hashlib
import json
from config import TOKEN
from json import loads
from aiofiles import open as aiopen

# –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Å–≤–æ–∏
DB_CONFIG = {
    'host': 'db4.myarena.ru',
    'user': 'u24939_universe',
    'password': 'Dbnz02082004',
    'db': 'u24939_universe',
}

pointer = lambda username: {
    "nickname": username,
    "password": "password",
    "user_id": user_id
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#logging.basicConfig(level=logging.DEBUG)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

online = []



# –û–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏–Ω–∞
class Login(StatesGroup):
    waiting_for_login = State()

# –û–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
class Password(StatesGroup):
    waiting_for_password = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    global user_id
    user_id = message.from_user.id
    firstname = message.from_user.username
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:")
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())

    if str(user_id) not in data_from_json:
            data_from_json[user_id] = pointer(firstname)

    with open("C:/IT/52Project/database.json", "w") as f_o:
        json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞
    await Login.waiting_for_login.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=Login.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())
    login = message.text
    data_from_json[f"{user_id}"]["nickname"] = login
    with open("C:/IT/52Project/database.json", "w") as f_o:
        json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(login=login)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    await Password.waiting_for_password.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=Password.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())
    global password
    password = hashlib.md5(message.text.strip().encode( 'utf-8' ) ).hexdigest()
    data_from_json[f"{user_id}"]["password"] = password   

    with open("C:/IT/52Project/database.json", "w") as f_o:
        json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    login = data.get('login')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with aiomysql.create_pool(**DB_CONFIG) as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await cur.execute("SELECT * FROM accounts WHERE name=%s AND password=%s", (login, password))
                row = await cur.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if row:
        ReplyKeyboardRemove()
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        bhouses = KeyboardButton('üè†–î–û–ú–ê')
        bcars = KeyboardButton('üöó–ú–ê–®–ò–ù–´')
        bbiz = KeyboardButton('üíº–ë–ò–ó–ù–ï–°–´')
        profile = KeyboardButton('üë§–ü–†–û–§–ò–õ–¨')
        binfo = KeyboardButton('‚ùó –ò–ù–§–û–†–ú–ê–¶–ò–Ø')
        markup.add(bhouses, bcars, bbiz, profile, binfo)
        await message.reply('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ùó –ò–ù–§–û–†–ú–ê–¶–ò–Ø".', reply_markup=markup)
    else:
        await message.reply("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.message_handler(lambda msg: msg.text.startswith('‚ùó –ò–ù–§–û–†–ú–ê–¶–ò–Ø'))
async def information(message):
    await message.reply('‚ùó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\
–ï—Å–ª–∏ –≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∏–∫ –≤ –∏–≥—Ä–µ, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å –∏ –≤ –±–æ—Ç–µ - /nick Ivan_Ivanov.\n\
–¢–∞–∫ –∂–µ –µ—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤ –∏–≥—Ä–µ, —Ç–æ –≤ –±–æ—Ç–µ —Ç–æ–∂–µ —Å–ª–µ–¥—É–µ—Ç –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å - /password QwErTy123\n\
\n\
dev: @solarezzov\n\
')

@dp.message_handler(commands=('password'))
async def setnick(message):
    with open("C:/IT/52Project/database.json", "r") as f_o:
            data_from_json = json.loads(f_o.read())
    user_id = message.from_user.id
    nick = data_from_json[f"{user_id}"]["nickname"]
    if message.text == "/password":
        await message.answer(f"{nick}, –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º!")
    else:
        user_id = message.from_user.id
        nick = data_from_json[f"{user_id}"]["nickname"]
        data_from_json[f"{user_id}"]["password"] = hashlib.md5(message.text[9:].strip().encode( 'utf-8' ) ).hexdigest()
        await message.answer(f'{nick}, –≤—ã —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–∞ "{message.text[10:]}"')

        with open("C:/IT/52Project/database.json", "w") as f_o:
                json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)

@dp.message_handler(commands=('nick'))
async def setnick(message):
    with open("C:/IT/52Project/database.json", "r") as f_o:
            data_from_json = json.loads(f_o.read())
    user_id = message.from_user.id
    nick = data_from_json[f"{user_id}"]["nickname"]
    if message.text == "/nick":
        await message.answer(f"{nick}, –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º!")
    for word in message.text:
        if word in all_emoji:
            await message.answer('‚ö†Ô∏è –í –Ω–∏–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã —ç–º–æ–¥–∂–∏!')
            break
    else:
        user_id = message.from_user.id
        nick = data_from_json[f"{user_id}"]["nickname"]
        data_from_json[f"{user_id}"]["nickname"] = f"{message.text[6:]}"
        await message.answer(f'{nick}, –≤—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ "{message.text[6:]}"')

        with open("C:/IT/52Project/database.json", "w") as f_o:
                json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)

@dp.message_handler(lambda msg: msg.text.startswith('üöó–ú–ê–®–ò–ù–´'))
async def houses_prf(message: types.Message):
    user_id = message.from_user.id
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())

    username = data_from_json[f"{user_id}"]["nickname"]

    async with aiomysql.create_pool(**DB_CONFIG) as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT vip, name FROM accounts WHERE name=%s", (username,))
                acc = await cur.fetchone()
                async with conn.cursor() as cur:
                    await cur.execute("SELECT taxes, owner, name FROM vehicles WHERE owner=%s", (username,))
                    car = await cur.fetchall()
        if(acc[0] == 1):
            if 4 in range(len(car)):
                    nickname = acc[1]
                    name_car = car[0][2]
                    car_paid_days = car[0][0]
                    car_paid_days2 = car[1][0]
                    name_car2 = car[1][2] 
                    car_paid_days3 = car[2][0]
                    name_car3 = car[2][2]
                    car_paid_days4 = car[3][0]
                    name_car4 = car[3][2]
                    car_paid_days5 = car[4][0]
                    name_car5 = car[4][2] 

                    profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days} —Ä—É–±–ª–µ–π.\n"\
                                f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car2}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days2} —Ä—É–±–ª–µ–π.\n"\
                                f"3Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car3}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days3} —Ä—É–±–ª–µ–π.\n"\
                                f"4Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car4}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days4} —Ä—É–±–ª–µ–π.\n"\
                                f"5Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car5}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days5} —Ä—É–±–ª–µ–π."
                                
                    await message.reply(profile_message)
            elif 3 in range(len(car)):    
                    nickname = acc[1]
                    name_car = car[0][2]
                    car_paid_days = car[0][0]
                    car_paid_days2 = car[1][0]
                    name_car2 = car[1][2] 
                    car_paid_days3 = car[2][0]
                    name_car3 = car[2][2]
                    car_paid_days4 = car[3][0]
                    name_car4 = car[3][2] 

                    profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days} —Ä—É–±–ª–µ–π.\n"\
                                f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car2}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days2} —Ä—É–±–ª–µ–π.\n"\
                                f"3Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car3}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days3} —Ä—É–±–ª–µ–π.\n"\
                                f"4Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car4}\n"\
                                    f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days4} —Ä—É–±–ª–µ–π."
                                
                    await message.reply(profile_message)
            elif 2 in range(len(car)):
                nickname = acc[1]
                name_car = car[0][2]
                car_paid_days = car[0][0]
                car_paid_days2 = car[1][0]
                name_car2 = car[1][2] 
                car_paid_days3 = car[2][0]
                name_car3 = car[2][2] 

                profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n" \
                            f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days} —Ä—É–±–ª–µ–π.\n"\
                            f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car2}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days2} —Ä—É–±–ª–µ–π.\n"\
                            f"3Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car3}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days3} —Ä—É–±–ª–µ–π."\
                            
                await message.reply(profile_message)
            elif 1 in range(len(car)):
                nickname = acc[1]
                name_car = car[0][2]
                car_paid_days = car[0][0]
                car_paid_days2 = car[1][0]
                name_car2 = car[1][2] 

                profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n" \
                            f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days} —Ä—É–±–ª–µ–π.\n"\
                            f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car2}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days2} —Ä—É–±–ª–µ–π."
                            
                await message.reply(profile_message)
            elif 0 in range(len(car)):
                print(car)
                nickname = acc[1]
                car_paid_days = car[0][0]
                name_car = car[0][2] 

                profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {name_car}\n"\
                                f"      –ù–∞–ª–æ–≥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_paid_days} —Ä—É–±–ª–µ–π."
           
                await message.reply(profile_message)
            elif(acc):
                nickname = acc[1]
                profile_message = f"‚õî {nickname}, —É –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è!"
                
                await message.reply(profile_message)
            else:
                nickname = acc[1]
                await message.reply(f"‚õî {nickname}, —É –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

        elif(acc[0] == 0):
            await message.reply("‚≠ê –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.")
        else:
            await message.reply("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

@dp.message_handler(lambda msg: msg.text.startswith('üíº–ë–ò–ó–ù–ï–°–´'))
async def houses_prf(message: types.Message):
    user_id = message.from_user.id
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())

    username = data_from_json[f"{user_id}"]["nickname"]

    async with aiomysql.create_pool(**DB_CONFIG) as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT vip, name FROM accounts WHERE name=%s", (username,))
                acc = await cur.fetchone()
                async with conn.cursor() as cur:
                    await cur.execute("SELECT day, owner, name FROM business WHERE owner=%s", (username,))
                    biz = await cur.fetchall()
        if(acc[0] == 1):
            if 2 in range(len(biz)):
                    nickname = acc[1]
                    name_biz = biz[0][2]
                    biz_paid_days = biz[0][0]
                    biz_paid_days2 = biz[1][0]
                    name_biz2 = biz[1][2] 
                    biz_paid_days3 = biz[2][0]
                    name_biz3 = biz[2][2]


                    profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –±–∏–∑–Ω–µ—Å–∞–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å.\n"\
                                f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz2}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days2} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å.\n"\
                                f"3Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz3}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days3} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å."
                                
                    await message.reply(profile_message)
            elif 1 in range(len(biz)):    
                    nickname = acc[1]
                    name_biz = biz[0][2]
                    biz_paid_days = biz[0][0]
                    biz_paid_days2 = biz[1][0]
                    name_biz2 = biz[1][2] 

                    profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –±–∏–∑–Ω–µ—Å–∞–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å.\n"\
                                f"2Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz2}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days2} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å."
                                
                    await message.reply(profile_message)
            elif 0 in range(len(biz)):
                    nickname = acc[1]
                    name_biz = biz[0][2]
                    biz_paid_days = biz[0][0]

                    profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–∏–º –±–∏–∑–Ω–µ—Å–∞–º:\n" \
                                f"1Ô∏è‚É£. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: {name_biz}\n"\
                                    f"      –ë–∏–∑–Ω–µ—Å –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {biz_paid_days} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å."
                            
                    await message.reply(profile_message)
            elif(acc):
                nickname = acc[1]


                profile_message = f"‚õî {nickname}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!"
                
                await message.reply(profile_message)
            else:
                nickname = acc[1]
                await message.reply(f"‚õî {nickname}, —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!")

        elif(acc[0] == 0):
            await message.reply("‚≠ê –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.")
        else:
            await message.reply("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

@dp.message_handler(lambda msg: msg.text.startswith('üè†–î–û–ú–ê'))
async def houses_prf(message: types.Message):
    user_id = message.from_user.id
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())

    username = data_from_json[f"{user_id}"]["nickname"]

    async with aiomysql.create_pool(**DB_CONFIG) as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT vip, name FROM accounts WHERE name=%s", (username,))
                acc = await cur.fetchone()
                async with conn.cursor() as cur:
                    await cur.execute("SELECT day, owner FROM houses WHERE owner=%s", (username,))
                    house = await cur.fetchone()
        if(acc[0] == 1):
            if(house):
                nickname = acc[1]
                house_paid_days = house[0]

                profile_message = f"üìã {nickname}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–µ–º—É –¥–æ–º—É:\n" \
                            f"1Ô∏è‚É£. –î–æ–º –æ–ø–ª–∞—á–µ–Ω –Ω–∞: {house_paid_days} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å."
                await message.reply(profile_message)
            else:
                nickname = acc[1]
                await message.reply(f"‚õî {nickname}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞!")
        elif(acc[0] == 0):
            await message.reply("‚≠ê –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.")
        else:
            await message.reply("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


@dp.message_handler(lambda msg: msg.text.startswith('üë§–ü–†–û–§–ò–õ–¨'))
async def cmd_profile(message: types.Message):
    with open("C:/IT/52Project/database.json", "r") as f_o:
        data_from_json = json.loads(f_o.read())

        user_id = message.from_user.id
        username = data_from_json[f"{user_id}"]["nickname"]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        async with aiomysql.create_pool(**DB_CONFIG) as pool:
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await cur.execute("SELECT vip FROM accounts WHERE name=%s", (username,))
                    acc = await cur.fetchone()
                    async with conn.cursor() as cur:
                        await cur.execute("SELECT online_type, lvl FROM accounts WHERE name=%s", (username,))
                        account = await cur.fetchone()
        if(acc[0] == 1):
            online_type = "–û–ù–õ–ê–ô–ù" if account[0] == 1 else "–û–§–§–õ–ê–ô–ù"
            nickname = data_from_json[f"{user_id}"]["nickname"]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.reply(f"üîç {nickname}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\
üî∞ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {account[1]}\n\
üåç –°—Ç–∞—Ç—É—Å: {online_type}\n\
‚≠ê VIP-–°—Ç–∞—Ç—É—Å: –ï—Å—Ç—å\n\
")
        elif acc[0] == 0:
            await message.reply("‚≠ê –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.")
        else:
            await message.reply("‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


async def send_to_enter(nickname: str):
    async with aiopen('C:/IT/52Project/database.json', 'r', encoding='utf-8') as file:
        json_data = loads(await file.read())
    for telegram_id, telegram_data in list(json_data.items()): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–æ–º —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—è
        if (telegram_id not in online):
            username = telegram_data['nickname']
            async with aiomysql.create_pool(**DB_CONFIG) as pool:
                async with pool.acquire() as conn:
                    async with conn.cursor() as cur:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await cur.execute("SELECT timevhod, login_ip FROM accounts WHERE name=%s", (username,))
                        vhod = await cur.fetchone()
            if telegram_data['nickname'] == nickname: # –ï—Å–ª–∏ –Ω–∏–∫ –µ—Å—Ç—å
                online.append(telegram_id)
                await bot.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    chat_id=telegram_id, # –£–∫–∞–∑—ã–≤–∞–µ–º telegram_id
                    text=f'‚û°Ô∏è –í—ã –≤–æ—à–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä! –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ - {vhod[0]}.\nüñ•Ô∏è IP - {vhod[1]}\n\n–ï—Å–ª–∏ –≤—Ö–æ–¥ –±—ã–ª —Å–æ–≤–µ—Ä—à—ë–Ω –Ω–µ –í–∞–º–∏, —Å—Ä–æ—á–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!' # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                )

async def send_to_exit(nickname: str):
    async with aiopen('C:/IT/52Project/database.json', 'r', encoding='utf-8') as file:
        json_data = loads(await file.read())
    for telegram_id, telegram_data in list(json_data.items()): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–æ–º —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—è
        if (telegram_id in online):
            if telegram_data['nickname'] == nickname: # –ï—Å–ª–∏ –Ω–∏–∫ –µ—Å—Ç—å
                online.remove(telegram_id)
                await bot.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    chat_id=telegram_id, # –£–∫–∞–∑—ã–≤–∞–µ–º telegram_id
                    text='‚¨ÖÔ∏è –í—ã –≤—ã—à–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞!' # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                )

async def checker():
  while True:
    async with aiopen('C:/IT/52Project/database.json', 'r', encoding='utf-8') as file:
        json_database = loads(await file.read())

    async with aiomysql.create_pool(**DB_CONFIG) as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await cur.execute("SELECT name, online_type FROM accounts")
                database = await cur.fetchall()
    for record in database:
      if (record[1]): # 1 - True, 0 - False
        await send_to_enter(record[0])
      else:
        await send_to_exit(record[0])
    await asyncio.sleep(5)


main_loop = asyncio.get_event_loop()

async def polling():
    executor.start_polling(dp, loop=main_loop, skip_updates=True)

if __name__ == "__main__":
    main_loop = asyncio.get_event_loop()
    main_loop.create_task(checker())
    executor.start_polling(dp, loop=main_loop, skip_updates=True)
